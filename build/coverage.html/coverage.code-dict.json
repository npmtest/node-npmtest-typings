{"/home/travis/build/npmtest/node-npmtest-typings/test.js":"/* istanbul instrument in package npmtest_typings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-typings/lib.npmtest_typings.js":"/* istanbul instrument in package npmtest_typings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_typings = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_typings = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-typings/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-typings && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_typings */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_typings\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_typings.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_typings.rollup.js'] =\n            local.assetsDict['/assets.npmtest_typings.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_typings.__dirname +\n                    '/lib.npmtest_typings.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin.js":"#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar minimist = require(\"minimist\");\nvar wordwrap = require(\"wordwrap\");\nvar hasUnicode = require(\"has-unicode\");\nvar path_1 = require(\"path\");\nvar chalk = require(\"chalk\");\nvar updateNotifier = require(\"update-notifier\");\nvar extend = require(\"xtend\");\nvar events_1 = require(\"events\");\nvar cli_1 = require(\"./support/cli\");\nvar aliases_1 = require(\"./aliases\");\nvar pkg = require('../package.json');\nvar unicodeConfig = process.env['TYPINGS_CONFIG_UNICODE'] || process.env['NPM_CONFIG_UNICODE'];\nvar argv = minimist(process.argv.slice(2), {\n    boolean: ['version', 'save', 'saveDev', 'savePeer', 'global', 'verbose', 'production', 'unicode'],\n    string: ['cwd', 'out', 'name', 'source', 'offset', 'limit', 'sort', 'loglevel'],\n    alias: {\n        global: ['G'],\n        version: ['v'],\n        save: ['S'],\n        saveDev: ['save-dev', 'D'],\n        savePeer: ['savePeer', 'P'],\n        verbose: ['V'],\n        out: ['o'],\n        help: ['h']\n    },\n    default: {\n        unicode: unicodeConfig ? isTrue(unicodeConfig) : hasUnicode(),\n        production: process.env['NODE_ENV'] === 'production'\n    }\n});\nfunction isTrue(value) {\n    return value === '1' || value === 'true';\n}\nvar cwd = argv.cwd ? path_1.resolve(argv.cwd) : process.cwd();\nvar emitter = new events_1.EventEmitter();\nvar args = extend(argv, { emitter: emitter, cwd: cwd });\nif (argv.loglevel) {\n    cli_1.setLoglevel(argv.loglevel);\n}\nupdateNotifier({ pkg: pkg }).notify();\nexec(args);\nemitter.on('enoent', function (_a) {\n    var path = _a.path;\n    cli_1.logWarning(\"Path \\\"\" + path + \"\\\" is missing\", 'enoent');\n});\nemitter.on('hastypings', function (_a) {\n    var name = _a.name, typings = _a.typings;\n    cli_1.logWarning(\"Typings for \\\"\" + name + \"\\\" already exist in \\\"\" + path_1.relative(cwd, typings) + \"\\\". You should \" +\n        \"let TypeScript resolve the packaged typings and uninstall the copy installed by Typings\", 'hastypings');\n});\nemitter.on('postmessage', function (_a) {\n    var message = _a.message, name = _a.name;\n    cli_1.logInfo(name + \": \" + message, 'postmessage');\n});\nemitter.on('badlocation', function (_a) {\n    var raw = _a.raw;\n    cli_1.logWarning(\"\\\"\" + raw + \"\\\" is mutable and may change, consider specifying a commit hash\", 'badlocation');\n});\nemitter.on('deprecated', function (_a) {\n    var date = _a.date, raw = _a.raw, parent = _a.parent;\n    if (parent == null || parent.raw == null) {\n        cli_1.logWarning(date.toLocaleDateString() + \": \\\"\" + raw + \"\\\" is deprecated (updated, replaced or removed)\", 'deprecated');\n    }\n});\nemitter.on('prune', function (_a) {\n    var name = _a.name, global = _a.global, resolution = _a.resolution;\n    var suffix = chalk.gray(\" (\" + resolution + \")\" + (global ? ' (global)' : ''));\n    cli_1.logInfo(\"\" + name + suffix, 'prune');\n});\nemitter.on('resolve', function (_a) {\n    var src = _a.src, name = _a.name;\n    cli_1.setStatus(\"Resolving \\\"\" + name + \"\\\" from \\\"\" + src + \"\\\"\");\n});\nemitter.on('resolved', function (_a) {\n    var name = _a.name;\n    cli_1.setStatus(\"Resolved \\\"\" + name + \"\\\"\");\n});\nemitter.on('compiledependency', function (_a) {\n    var name = _a.name;\n    cli_1.setStatus(\"Compiling \\\"\" + name + \"\\\"\");\n});\nfunction exec(options) {\n    if (options._.length) {\n        var command = aliases_1.aliases[options._[0]];\n        var args_1 = options._.slice(1);\n        if (command != null) {\n            if (options.help) {\n                return console.log(command.help());\n            }\n            return cli_1.handle(command.exec(args_1, options), options);\n        }\n    }\n    else if (options.version) {\n        console.log(pkg.version);\n        return;\n    }\n    var wrap = wordwrap(4, 80);\n    console.log(\"\\nUsage: typings <command>\\n\\nCommands:\\n\" + wrap(Object.keys(aliases_1.aliases).sort().join(', ')) + \"\\n\\ntypings <command> -h    Get help for <command>\\ntypings <command> -V    Enable verbose logging\\n\\ntypings --version       Print the CLI version\\n  [--loglevel] <level>  Set the log level (\\\"debug\\\", info\\\", \\\"warn\\\", \\\"error\\\" or \\\"silent\\\")\\n\\ntypings@\" + pkg.version + \" \" + path_1.join(__dirname, '..') + \"\\n\");\n}\n//# sourceMappingURL=bin.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/support/cli.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk = require(\"chalk\");\nvar archy = require(\"archy\");\nvar listify = require(\"listify\");\nvar logUpdate = require(\"log-update\");\nvar elegantSpinner = require(\"elegant-spinner\");\nvar truncate = require(\"cli-truncate\");\nvar os = require(\"os\");\nvar promise_finally_1 = require(\"promise-finally\");\nvar pkg = require('../../package.json');\nvar statusFrame;\nvar statusTimeout;\nvar statusMessage;\nfunction log(message) {\n    logUpdate.clear();\n    console.error(message);\n    render();\n}\nexports.log = log;\nfunction formatLine(color, type, line, prefix) {\n    return chalk.bgBlack.white('typings') + \" \" + color(type) + \" \" + (prefix ? chalk.magenta(prefix + \" \") : '') + line;\n}\nvar loglevels = {\n    debug: 0,\n    info: 1,\n    warn: 2,\n    error: 3,\n    silent: 4\n};\nvar loglevel = loglevels['info'];\nfunction setLoglevel(level) {\n    if (!loglevels.hasOwnProperty(level)) {\n        logError(\"invalid log level (options are \" + listify(Object.keys(loglevels)) + \")\");\n        return;\n    }\n    return (loglevel = loglevels[level]);\n}\nexports.setLoglevel = setLoglevel;\nfunction logInfo(message, prefix) {\n    if (loglevel > loglevels['info']) {\n        return;\n    }\n    var output = message.split(/\\r?\\n/g).map(function (line) {\n        return formatLine(chalk.bgBlack.cyan, 'INFO', line, prefix);\n    }).join('\\n');\n    log(output);\n}\nexports.logInfo = logInfo;\nfunction logWarning(message, prefix) {\n    if (loglevel > loglevels['warn']) {\n        return;\n    }\n    var output = message.split(/\\r?\\n/g).map(function (line) {\n        return formatLine(chalk.bgYellow.black, 'WARN', line, prefix);\n    }).join('\\n');\n    log(output);\n}\nexports.logWarning = logWarning;\nfunction logError(message, prefix) {\n    if (loglevel > loglevels['error']) {\n        return;\n    }\n    var output = message.split(/\\r?\\n/g).map(function (line) {\n        return formatLine(chalk.bgBlack.red, 'ERR!', line, prefix);\n    }).join('\\n');\n    log(output);\n}\nexports.logError = logError;\nfunction setStatus(message) {\n    statusMessage = message;\n}\nexports.setStatus = setStatus;\nfunction render() {\n    clearInterval(statusTimeout);\n    if (statusFrame && process.stdout.isTTY) {\n        var status = chalk.cyan(statusFrame());\n        if (statusMessage) {\n            status += \" \" + statusMessage;\n        }\n        logUpdate(truncate(status, process.stdout.columns));\n        statusTimeout = setTimeout(render, 50);\n    }\n}\nexports.render = render;\nfunction startSpinner() {\n    statusFrame = elegantSpinner();\n    render();\n}\nexports.startSpinner = startSpinner;\nfunction stopSpinner() {\n    clearTimeout(statusTimeout);\n    statusFrame = undefined;\n    statusTimeout = undefined;\n    statusMessage = undefined;\n    logUpdate.clear();\n    logUpdate.done();\n}\nexports.stopSpinner = stopSpinner;\nfunction spinner(promise) {\n    startSpinner();\n    return promise_finally_1.default(Promise.resolve(promise), stopSpinner);\n}\nexports.spinner = spinner;\nfunction handle(promise, options) {\n    return Promise.resolve(promise).catch(function (err) { return handleError(err, options); });\n}\nexports.handle = handle;\nfunction handleError(error, options) {\n    var cause = error.cause;\n    logError(error.message, 'message');\n    while (cause) {\n        logError(cause.message, 'caused by');\n        cause = cause.cause;\n    }\n    if (options.verbose && error.stack) {\n        logError('');\n        logError(error.stack, 'stack');\n    }\n    logError('');\n    logError(process.cwd(), 'cwd');\n    logError(os.type() + \" \" + os.release(), 'system');\n    logError(process.argv.map(function (arg) { return JSON.stringify(arg); }).join(' '), 'command');\n    logError(process.version, 'node -v');\n    logError(pkg.version, \"typings -v\");\n    if (error.code) {\n        logError(error.code, 'code');\n    }\n    logError('');\n    logError('If you need help, you may report this error at:');\n    logError(\"  <https://github.com/typings/typings/issues>\");\n    process.exit(1);\n}\nexports.handleError = handleError;\nfunction toDependencyName(name, node, suffix) {\n    var fullname = node.version ? name + \"@\" + node.version : name;\n    return suffix ? fullname + \" \" + suffix : fullname;\n}\nfunction archifyDependencyTree(options) {\n    var result = {\n        label: options.name ? toDependencyName(options.name, options.tree) : '',\n        nodes: []\n    };\n    function children(nodes, dependencies, suffix) {\n        for (var _i = 0, _a = Object.keys(dependencies).sort(); _i < _a.length; _i++) {\n            var name = _a[_i];\n            var tree_1 = dependencies[name];\n            nodes.push(traverse({\n                label: toDependencyName(name, tree_1, suffix),\n                nodes: []\n            }, tree_1));\n        }\n    }\n    function traverse(result, tree) {\n        var nodes = result.nodes;\n        children(nodes, tree.dependencies);\n        children(nodes, tree.devDependencies, chalk.gray('(dev)'));\n        children(nodes, tree.peerDependencies, chalk.gray('(peer)'));\n        children(nodes, tree.globalDependencies, chalk.gray('(global)'));\n        children(nodes, tree.globalDevDependencies, chalk.gray('(global dev)'));\n        return result;\n    }\n    var tree = traverse(result, options.tree);\n    return archy(tree, '', { unicode: options.unicode });\n}\nexports.archifyDependencyTree = archifyDependencyTree;\n//# sourceMappingURL=cli.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/aliases.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bundle = require(\"./bin-bundle\");\nvar init = require(\"./bin-init\");\nvar uninstall = require(\"./bin-uninstall\");\nvar install = require(\"./bin-install\");\nvar list = require(\"./bin-list\");\nvar search = require(\"./bin-search\");\nvar open = require(\"./bin-open\");\nvar view = require(\"./bin-view\");\nvar prune = require(\"./bin-prune\");\nexports.aliases = {\n    i: install,\n    in: install,\n    install: install,\n    r: uninstall,\n    rm: uninstall,\n    un: uninstall,\n    remove: uninstall,\n    uninstall: uninstall,\n    init: init,\n    ls: list,\n    ll: list,\n    la: list,\n    list: list,\n    bundle: bundle,\n    search: search,\n    open: open,\n    view: view,\n    info: view,\n    prune: prune\n};\n//# sourceMappingURL=aliases.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-bundle.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings bundle --out <filepath>\\n\\nOptions:\\n  [--out|-o] <filepath>  The bundled output file path\\n  [--global|-G]          Bundle as a global definition\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    return cli_1.spinner(typings_core_1.bundle(options));\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-bundle.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-init.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar typings_core_1 = require(\"typings-core\");\nfunction help() {\n    return \"\\ntypings init\\n\\nOptions:\\n  [--upgrade]    Upgrade `tsd.json` to `typings.json`\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    var cwd = options.cwd, upgrade = options.upgrade;\n    return typings_core_1.init({ cwd: cwd, upgrade: upgrade });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-init.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-uninstall.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar chalk = require(\"chalk\");\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings uninstall <name> [--save|--save-dev|--save-peer] [--global]\\n\\nOptions:\\n  [--save|-S]       Remove from \\\"dependencies\\\"\\n  [--save-dev|-D]   Remove from \\\"devDependencies\\\"\\n  [--save-peer|-P]  Remove from \\\"peerDependencies\\\"\\n  [--global|-G]     Remove from the global version of dependencies\\n    [-SG]           Remove from \\\"globalDependencies\\\"\\n    [-DG]           Remove from \\\"globalDevDependencies\\\"\\n\\nAliases: r, rm, remove, un\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    if (args.length === 0) {\n        cli_1.logError(help());\n        return;\n    }\n    return cli_1.spinner(typings_core_1.uninstallDependencies(args, options))\n        .then(function (result) {\n        Object.keys(result.resolutions).forEach(function (name) {\n            args.forEach(function (arg) {\n                console.log(\"- \" + arg + \" \" + chalk.grey(\"(\" + name + \")\"));\n            });\n        });\n    });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-uninstall.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-install.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar listify = require(\"listify\");\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings install (with no arguments, in package directory)\\ntypings install [<name>=]<location>\\n\\n  <name>      Alternate name of the definition\\n  <location>  The location to read from (described below)\\n\\nValid Locations:\\n  [<source>~]<pkg>[@<version>][#<tag>]\\n  file:<path>\\n  github:<org>/<repo>[/<path>][#<commitish>]\\n  bitbucket:<org>/<repo>[/<path>][#<commitish>]\\n  npm:<pkg>[/<path>]\\n  bower:<pkg>[/<path>]\\n  jspm:<pkg> (for jspm@0.17+)\\n  http(s)://<host>/<path>\\n\\n  <source>    The registry mirror: \\\"npm\\\", \\\"bower\\\", \\\"env\\\", \\\"global\\\", \\\"lib\\\" or \\\"dt\\\"\\n              When not specified, `defaultSource` in `.typingsrc` will be used.\\n  <path>      Path to a `.d.ts` file or `typings.json`\\n  <host>      A domain name (with optional port)\\n  <version>   A semver range (E.g. \\\">=4.0\\\")\\n  <tag>       The specific tag of a registry entry\\n  <commitish> A git commit, tag or branch\\n\\nOptions:\\n  [--save|-S]       Persist to \\\"dependencies\\\"\\n  [--save-dev|-D]   Persist to \\\"devDependencies\\\"\\n  [--save-peer|-P]  Persist to \\\"peerDependencies\\\"\\n  [--global|-G]     Install and persist as a global definition\\n    [-SG]           Persist to \\\"globalDependencies\\\"\\n    [-DG]           Persist to \\\"globalDevDependencies\\\"\\n  [--production]    Install only production dependencies (omits dev dependencies) and\\n                    is implictly set when environment variable NODE_ENV=production\\n  [--no-production] Install production and dev dependencies (overrides environment\\n                    variable NODE_ENV=production)\\n\\nAliases: i, in\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    var emitter = options.emitter, unicode = options.unicode;\n    if (typeof options.ambient !== 'undefined') {\n        cli_1.logError('The \"ambient\" flag is deprecated. Please use \"global\" instead', 'deprecated');\n        return;\n    }\n    if (args.length === 0) {\n        return cli_1.spinner(typings_core_1.install(options))\n            .then(function (result) {\n            var name = result.name, tree = result.tree;\n            console.log(cli_1.archifyDependencyTree({ name: name, tree: tree, unicode: unicode }));\n        });\n    }\n    emitter.on('reference', function (_a) {\n        var reference = _a.reference, resolution = _a.resolution, name = _a.name;\n        cli_1.logInfo(\"Stripped reference \\\"\" + reference + \"\\\" during installation from \\\"\" + name + \"\\\" (\" + resolution + \")\", 'reference');\n    });\n    emitter.on('globaldependencies', function (_a) {\n        var name = _a.name, dependencies = _a.dependencies;\n        var deps = Object.keys(dependencies).map(function (x) { return JSON.stringify(x); });\n        if (deps.length) {\n            cli_1.logInfo(\"\\\"\" + name + \"\\\" lists global dependencies on \" + listify(deps) + \" that must be installed manually\", 'globaldependencies');\n        }\n    });\n    return cli_1.spinner(typings_core_1.installDependenciesRaw(args, options))\n        .then(function (results) {\n        for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\n            var result = results_1[_i];\n            var name = result.name, tree = result.tree;\n            console.log(cli_1.archifyDependencyTree({ name: name, tree: tree, unicode: unicode }));\n        }\n    });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-install.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-list.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cli_1 = require(\"./support/cli\");\nvar typings_core_1 = require(\"typings-core\");\nfunction help() {\n    return \"\\ntypings list\\n\\nOptions:\\n  [--production] List only production dependencies (omit dev dependencies)\\n\\nAliases: la, ll, ls\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    return cli_1.spinner(typings_core_1.list(options))\n        .then(function (tree) {\n        console.log(cli_1.archifyDependencyTree({ tree: tree, unicode: options.unicode }));\n    });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-list.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-search.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar columnify = require(\"columnify\");\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings search [query]\\n\\nOptions:\\n  [--name] <name>     Search for definitions by exact name (E.g. only \\\"react\\\")\\n  [--source] <source> The registry mirror (E.g. \\\"npm\\\", \\\"bower\\\", \\\"env\\\", \\\"global\\\", \\\"dt\\\", ...)\\n  [--offset] <x>      Skip first \\\"x\\\" results (default: 0)\\n  [--limit] <x>       Limit to \\\"x\\\" results (default: 20, max: 100)\\n  [--order] <order>   Direction to sort results (default: \\\"asc\\\", enum: \\\"asc\\\" or \\\"desc\\\")\\n  [--sort] <column>   Order results by a column (E.g. \\\"versions\\\", \\\"name\\\", ...)\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    var query = args[0];\n    var name = options.name, source = options.source, offset = options.offset, limit = options.limit, order = options.order, sort = options.sort;\n    return cli_1.spinner(typings_core_1.search({ name: name, source: source, query: query, offset: offset, limit: limit, order: order, sort: sort }))\n        .then(function (_a) {\n        var results = _a.results, total = _a.total;\n        if (total === 0) {\n            console.log('No results found for search');\n            return;\n        }\n        console.log(\"Viewing \" + results.length + \" of \" + total);\n        console.log('');\n        console.log(columnify(results));\n    });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-search.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-open.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings open <location>\\n\\n  <location>  A known Typings location with scheme (see typings install -h)\\n\";\n}\nexports.help = help;\nfunction exec(args) {\n    if (args.length === 0) {\n        cli_1.logError(help());\n        return;\n    }\n    console.log(typings_core_1.open(args[0]));\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-open.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-view.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar columnify = require(\"columnify\");\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings view <pkg>\\n\\n  <pkg>  A registry expression like `[<source>~]<pkg>`\\n\\nOptions:\\n  [--versions]  List all package versions\\n\\nAliases: info\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    if (args.length === 0) {\n        cli_1.logError(help());\n        return;\n    }\n    if (options.versions) {\n        return typings_core_1.viewVersions(args[0], options)\n            .then(function (versions) { return console.log(columnify(versions)); });\n    }\n    return typings_core_1.viewEntry(args[0], options)\n        .then(function (entry) { return console.log(columnify(entry)); });\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-view.js.map","/home/travis/build/npmtest/node-npmtest-typings/typings/dist/bin-prune.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar typings_core_1 = require(\"typings-core\");\nvar cli_1 = require(\"./support/cli\");\nfunction help() {\n    return \"\\ntypings prune\\n\\nOptions:\\n  [--production] Also prune non-production dependencies\\n\";\n}\nexports.help = help;\nfunction exec(args, options) {\n    return cli_1.spinner(typings_core_1.prune(options));\n}\nexports.exec = exec;\n//# sourceMappingURL=bin-prune.js.map"}